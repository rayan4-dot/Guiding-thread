
    <!-- Background Overlay -->
    <div class="fixed inset-0 z-40 bg-black/50 transition-opacity duration-300"
         x-show="postModalOpen"
         x-cloak
         x-transition:enter="ease-out duration-300"
         x-transition:enter-start="opacity-0"
         x-transition:enter-end="opacity-100"
         x-transition:leave="ease-in duration-200"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0">
    </div>

    <!-- Post Creation Modal -->
    <div class="fixed inset-0 z-50 flex items-center justify-center p-4"
         x-show="postModalOpen"
         x-cloak
         x-transition:enter="ease-out duration-300"
         x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
         x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
         x-transition:leave="ease-in duration-200"
         x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
         x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95">
        <div class="relative bg-black w-full max-w-lg rounded-xl border border-gray-800 shadow-lg" @click.away="postModalOpen = false">
            <div class="flex items-center justify-between px-4 py-3 border-b border-gray-800">
                <button @click="postModalOpen = false" class="text-white hover:bg-gray-800 p-2 rounded-full transition-colors">
                    <i class="fa-solid fa-xmark"></i>
                </button>
                <h3 class="text-xl font-bold text-white">Compose Post</h3>
                <div class="w-8"></div> <!-- Spacer for alignment -->
            </div>
            <form id="postForm" class="p-4">
                @csrf
                <div class="flex gap-3">
                    <img src="{{ Auth::user()->profile_picture ? Storage::url(Auth::user()->profile_picture) : asset('images/default-profile.png') }}" alt="Profile Picture" class="w-12 h-12 rounded-full">
                    <div class="flex-1">
                        <textarea name="content" rows="4" placeholder="What's happening?" class="w-full bg-transparent text-white border-0 focus:ring-0 focus:outline-none resize-none text-lg" maxlength="280"></textarea>
                        <span id="content-error" class="text-red-500 text-sm hidden"></span>
                    </div>
                </div>
                <div class="mt-4 flex justify-between items-center border-t border-dark-border pt-3">
                    <div class="flex gap-3 text-primary">
                        <label class="cursor-pointer p-2 rounded-full hover:bg-primary/10 transition-colors">
                            <i class="fa-regular fa-image"></i>
                            <input type="file" name="media" class="hidden" accept="image/*,video/mp4">
                        </label>
                    </div>
                    <button type="submit" id="submitPost" class="bg-primary text-white font-bold px-4 py-1 rounded-full hover:bg-secondary transition-colors disabled:bg-gray-500" disabled>
                        Post
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // [Previous JavaScript remains the same until the form submission]

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize modal state to false
            Alpine.store('postModalOpen', false);
            
            const form = document.getElementById('postForm');
            if (!form) return;

            const submitBtn = document.getElementById('submitPost');
            const contentInput = form.querySelector('textarea[name="content"]');
            const mediaInput = form.querySelector('input[name="media"]');

            function updateSubmitButton() {
                const hasContent = contentInput.value.trim().length > 0;
                const hasMedia = mediaInput.files.length > 0;
                submitBtn.disabled = !(hasContent || hasMedia);
            }

            contentInput.addEventListener('input', updateSubmitButton);
            mediaInput.addEventListener('change', updateSubmitButton);

            form.addEventListener('submit', async function(e) {
                e.preventDefault();
                submitBtn.disabled = true;

                // Clear errors
                ['content', 'media'].forEach(field => {
                    const errorSpan = document.getElementById(`${field}-error`);
                    if (errorSpan) {
                        errorSpan.classList.add('hidden');
                        errorSpan.textContent = '';
                    }
                });

                try {
                    const formData = new FormData(form);
                    formData.append('_token', document.querySelector('meta[name="csrf-token"]').content);

                    const response = await fetch("{{ route('posts.store') }}", {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'Accept': 'application/json',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        // Close modal
                        Alpine.store('postModalOpen', false);
                        
                        // Reset form
                        form.reset();
                        contentInput.value = '';
                        mediaInput.value = '';
                        submitBtn.disabled = true;

                        // Add new post to feed
                        if (typeof window.appendNewPost === 'function') {
                            window.appendNewPost(data.post);
                        }

                        showToast('Post created successfully!');
                    } else {
                        if (data.errors) {
                            Object.keys(data.errors).forEach(field => {
                                const errorSpan = document.getElementById(`${field}-error`);
                                if (errorSpan) {
                                    errorSpan.textContent = data.errors[field][0];
                                    errorSpan.classList.remove('hidden');
                                }
                            });
                        }
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('Something went wrong. Please try again.');
                } finally {
                    submitBtn.disabled = false;
                }
            });
        });

        function showToast(message) {
            const toast = document.createElement('div');
            toast.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50';
            toast.textContent = message;
            document.body.appendChild(toast);
            setTimeout(() => toast.remove(), 3000);
        }

        // Add x-cloak styles
        const style = document.createElement('style');
        style.textContent = '[x-cloak] { display: none !important; }';
        document.head.appendChild(style);
    </script>
</aside>